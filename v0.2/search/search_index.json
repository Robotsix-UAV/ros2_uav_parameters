{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ROS2 UAV Parameters Documentation Overview Welcome to the ROS2 UAV Parameters documentation. This repository provides a parameter server node specifically designed for use with other ROS2 UAV packages. The parameter server node is a standalone node that manages UAV parameters within the ROS2 ecosystem. It is designed to handle parameters that are commonly used in the ROS2 UAV nodes. It allows users to find all standard parameters in one place. This documentation provides guidance to users. Developers can find additional information at the Developer Documentation page. ROS2 Version This package is designed to work with ROS2 Humble Hawksbill. It has not been tested with other versions of ROS2. Features Parameter Server Node A node designed to manage UAV parameters within the ROS2 ecosystem. This node reads parameters from YAML files in the config directory of this package and creates them. They become available to other nodes in the system. Guidance on configuring the parameter server node can be found in the Configuration section of this documentation. You can run the parameter server node using the following commands: ros2 run ros2_uav_parameters parameter_server or ros2 launch ros2_uav_parameters parameter_server_launch.py config_directory:=<your_config_folder_path> for a custom configuration folder. ParameterClientNode The ParameterClientNode is a class inherited from ROS2 Node that subscribes to a list of parameters and synchronizes them with the parameter server. It stores the parameters under a std::map remote_parameters_ that can be accessed by the node. #include <ros2_uav_parameters/parameter_client.hpp> #include <ros2_uav_cpp/ros2_logger.hpp> using ros2_uav::utils::RosLoggerInterface; // Create a custom Node inherited from ParameterClient class MyClient : public ros2_uav::parameters::ParameterClient { public: MyClient(const std::string & node_name, const std::vector<std::string> & required_parameters) : ParameterClient(node_name, required_parameters) { // Create a ROS timer to display the registered parameter values auto timer_callback = [this]() { double ground_velocity, vertical_velocity; remote_parameters_[\"limits.ground_velocity\"]->getValue(ground_velocity); remote_parameters_[\"limits.vertical_velocity\"]->getValue(vertical_velocity); UAVCPP_INFO( \"Ground velocity {} --- Vertical velocity {}\", ground_velocity, vertical_velocity); }; timer_ = create_wall_timer(std::chrono::seconds(1), timer_callback); } private: rclcpp::TimerBase::SharedPtr timer_; }; int main(int argc, char ** argv) { rclcpp::init(argc, argv); // Define the required parameters auto required_parameters = std::vector<std::string>{\"limits.ground_velocity\", \"limits.vertical_velocity\"}; // Create the custom node auto node = std::make_shared<MyClient>( \"parameter_client\", required_parameters); // Set the logger to node logger for the uav_cpp library auto logger = std::make_shared<RosLoggerInterface>(node->get_logger()); uav_cpp::logger::Logger::setCustomLogger(logger); // Spin the node rclcpp::spin(node); rclcpp::shutdown(); return 0; }","title":"Home"},{"location":"#ros2-uav-parameters-documentation","text":"","title":"ROS2 UAV Parameters Documentation"},{"location":"#overview","text":"Welcome to the ROS2 UAV Parameters documentation. This repository provides a parameter server node specifically designed for use with other ROS2 UAV packages. The parameter server node is a standalone node that manages UAV parameters within the ROS2 ecosystem. It is designed to handle parameters that are commonly used in the ROS2 UAV nodes. It allows users to find all standard parameters in one place. This documentation provides guidance to users. Developers can find additional information at the Developer Documentation page.","title":"Overview"},{"location":"#ros2-version","text":"This package is designed to work with ROS2 Humble Hawksbill. It has not been tested with other versions of ROS2.","title":"ROS2 Version"},{"location":"#features","text":"","title":"Features"},{"location":"#parameter-server-node","text":"A node designed to manage UAV parameters within the ROS2 ecosystem. This node reads parameters from YAML files in the config directory of this package and creates them. They become available to other nodes in the system. Guidance on configuring the parameter server node can be found in the Configuration section of this documentation. You can run the parameter server node using the following commands: ros2 run ros2_uav_parameters parameter_server or ros2 launch ros2_uav_parameters parameter_server_launch.py config_directory:=<your_config_folder_path> for a custom configuration folder.","title":"Parameter Server Node"},{"location":"#parameterclientnode","text":"The ParameterClientNode is a class inherited from ROS2 Node that subscribes to a list of parameters and synchronizes them with the parameter server. It stores the parameters under a std::map remote_parameters_ that can be accessed by the node. #include <ros2_uav_parameters/parameter_client.hpp> #include <ros2_uav_cpp/ros2_logger.hpp> using ros2_uav::utils::RosLoggerInterface; // Create a custom Node inherited from ParameterClient class MyClient : public ros2_uav::parameters::ParameterClient { public: MyClient(const std::string & node_name, const std::vector<std::string> & required_parameters) : ParameterClient(node_name, required_parameters) { // Create a ROS timer to display the registered parameter values auto timer_callback = [this]() { double ground_velocity, vertical_velocity; remote_parameters_[\"limits.ground_velocity\"]->getValue(ground_velocity); remote_parameters_[\"limits.vertical_velocity\"]->getValue(vertical_velocity); UAVCPP_INFO( \"Ground velocity {} --- Vertical velocity {}\", ground_velocity, vertical_velocity); }; timer_ = create_wall_timer(std::chrono::seconds(1), timer_callback); } private: rclcpp::TimerBase::SharedPtr timer_; }; int main(int argc, char ** argv) { rclcpp::init(argc, argv); // Define the required parameters auto required_parameters = std::vector<std::string>{\"limits.ground_velocity\", \"limits.vertical_velocity\"}; // Create the custom node auto node = std::make_shared<MyClient>( \"parameter_client\", required_parameters); // Set the logger to node logger for the uav_cpp library auto logger = std::make_shared<RosLoggerInterface>(node->get_logger()); uav_cpp::logger::Logger::setCustomLogger(logger); // Spin the node rclcpp::spin(node); rclcpp::shutdown(); return 0; }","title":"ParameterClientNode"},{"location":"configuration/","text":"Configuration Guide Overview This document explains how to configure YAML files in the config directory for the parameter server. These files define parameters for the parameter server node, including their default values, types, descriptions, and constraints. File Location Place YAML files in the config directory of your ROS 2 package. The node will parse all YAML files in this directory and its subfolders. If the package is built using colcon build --symlink-install , you can modify the files in the source directory without rebuilding the package. YAML File Structure Each YAML file can contain multiple parameter groups. Each parameter group contains multiple parameters with attributes: default : Specifies the default value. Use a sequence ( [] ) for arrays. type : Defines the parameter type ( int , double , bool , string ). description : (Optional) Describes the parameter. min : (Optional) Minimum value for int and double types. max : (Optional) Maximum value for int and double types. The parameter server node will load all parameters from the YAML files and expose them as ROS 2 parameters. The parameters can be accessed and modified using the ROS 2 parameter client API. They are named using the following convention: <parameter_group>.<parameter_name> . Example parameters.yaml Parameter_group_1: Parameter1: default: 5 min: 0 max: 10 type: int description: \"An integer parameter\" Parameter2: default: 3.14 min: 0.0 max: 10.0 type: float Parameter3: default: true type: bool Parameter4: default: \"hello\" type: string Parameter_group_2: ArrayParameter1: default: [1, 2, 3] type: int ArrayParameter2: default: [1.1, 2.2, 3.3] type: float ArrayParameter3: default: [true, false, true] type: bool ArrayParameter4: default: [\"foo\", \"bar\", \"baz\"] type: string","title":"Configuration"},{"location":"configuration/#configuration-guide","text":"","title":"Configuration Guide"},{"location":"configuration/#overview","text":"This document explains how to configure YAML files in the config directory for the parameter server. These files define parameters for the parameter server node, including their default values, types, descriptions, and constraints.","title":"Overview"},{"location":"configuration/#file-location","text":"Place YAML files in the config directory of your ROS 2 package. The node will parse all YAML files in this directory and its subfolders. If the package is built using colcon build --symlink-install , you can modify the files in the source directory without rebuilding the package.","title":"File Location"},{"location":"configuration/#yaml-file-structure","text":"Each YAML file can contain multiple parameter groups. Each parameter group contains multiple parameters with attributes: default : Specifies the default value. Use a sequence ( [] ) for arrays. type : Defines the parameter type ( int , double , bool , string ). description : (Optional) Describes the parameter. min : (Optional) Minimum value for int and double types. max : (Optional) Maximum value for int and double types. The parameter server node will load all parameters from the YAML files and expose them as ROS 2 parameters. The parameters can be accessed and modified using the ROS 2 parameter client API. They are named using the following convention: <parameter_group>.<parameter_name> .","title":"YAML File Structure"},{"location":"configuration/#example-parametersyaml","text":"Parameter_group_1: Parameter1: default: 5 min: 0 max: 10 type: int description: \"An integer parameter\" Parameter2: default: 3.14 min: 0.0 max: 10.0 type: float Parameter3: default: true type: bool Parameter4: default: \"hello\" type: string Parameter_group_2: ArrayParameter1: default: [1, 2, 3] type: int ArrayParameter2: default: [1.1, 2.2, 3.3] type: float ArrayParameter3: default: [true, false, true] type: bool ArrayParameter4: default: [\"foo\", \"bar\", \"baz\"] type: string","title":"Example parameters.yaml"}]}