{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ROS2 UAV Parameters Documentation Overview Welcome to the ROS2 UAV Parameters documentation. This repository provides a parameter server node specifically designed for use with other ROS2 UAV packages. The parameter server node is a standalone node that manages UAV parameters within the ROS2 ecosystem. It is designed to handle parameters that are commonly used in the ROS2 UAV nodes. It allows users to find all standard parameters in one place and provides utilities to facilitate interactions with the parameter server. This documentation provides guidance to users. Developers can find additional information at the Developer Documentation page. ROS2 Version This package is designed to work with ROS2 Humble Hawksbill. It has not been tested with other versions of ROS2. Features Parameter Server Node A node designed to manage UAV parameters within the ROS2 ecosystem. This node reads parameters from YAML files in the config directory of this package and creates them. They become available to other nodes in the system. Guidance on configuring the parameter server node can be found in the Configuration section of this documentation. You can run the parameter server node using the following commands: ros2 run ros2_uav_parameters parameter_server or ros2 launch ros2_uav_parameters parameter_server_launch.py config_directory:=<your_config_folder_path> for a custom configuration folder. Auto Ros Parameters Library A library with utilities to facilitate parameter creation and interaction with the parameter server. Guidance on using the utility library in other nodes can be found in the Parameters Library section of this documentation.","title":"Home"},{"location":"#ros2-uav-parameters-documentation","text":"","title":"ROS2 UAV Parameters Documentation"},{"location":"#overview","text":"Welcome to the ROS2 UAV Parameters documentation. This repository provides a parameter server node specifically designed for use with other ROS2 UAV packages. The parameter server node is a standalone node that manages UAV parameters within the ROS2 ecosystem. It is designed to handle parameters that are commonly used in the ROS2 UAV nodes. It allows users to find all standard parameters in one place and provides utilities to facilitate interactions with the parameter server. This documentation provides guidance to users. Developers can find additional information at the Developer Documentation page.","title":"Overview"},{"location":"#ros2-version","text":"This package is designed to work with ROS2 Humble Hawksbill. It has not been tested with other versions of ROS2.","title":"ROS2 Version"},{"location":"#features","text":"","title":"Features"},{"location":"#parameter-server-node","text":"A node designed to manage UAV parameters within the ROS2 ecosystem. This node reads parameters from YAML files in the config directory of this package and creates them. They become available to other nodes in the system. Guidance on configuring the parameter server node can be found in the Configuration section of this documentation. You can run the parameter server node using the following commands: ros2 run ros2_uav_parameters parameter_server or ros2 launch ros2_uav_parameters parameter_server_launch.py config_directory:=<your_config_folder_path> for a custom configuration folder.","title":"Parameter Server Node"},{"location":"#auto-ros-parameters-library","text":"A library with utilities to facilitate parameter creation and interaction with the parameter server. Guidance on using the utility library in other nodes can be found in the Parameters Library section of this documentation.","title":"Auto Ros Parameters Library"},{"location":"configuration/","text":"Configuration Guide Overview This document explains how to configure YAML files in the config directory for the parameter server. These files define parameters for the parameter server node, including their default values, types, descriptions, and constraints. File Location Place YAML files in the config directory of your ROS 2 package. The node will parse all YAML files in this directory and its subfolders. If the package is built using colcon build --symlink-install , you can modify the files in the source directory without rebuilding the package. YAML File Structure Each YAML file can contain multiple parameter groups. Each parameter group contains multiple parameters with attributes: default : Default value of the parameter. type : Data type ( int , double , bool , string ). description : (Optional) Description of the parameter. constraints_description : (Optional) Additional constraints on the parameter. min : (Optional) Minimum value for int and double types. max : (Optional) Maximum value for int and double types. Example parameters.yaml Parameter_group_1: Parameter1: default: 5 min: 0 max: 10 type: int description: \"An integer parameter\" constraints_description: \"Must be between 0 and 10\" Parameter2: default: 3.14 min: 0.0 max: 10.0 type: double Parameter3: default: true type: bool Parameter4: default: \"hello\" type: string Parameter_group_2: ArrayParameter1: default: [1, 2, 3] type: int ArrayParameter2: default: [1.1, 2.2, 3.3] type: double ArrayParameter3: default: [true, false, true] type: bool ArrayParameter4: default: [\"foo\", \"bar\", \"baz\"] type: string Attributes default : Specifies the default value. Use a sequence ( [] ) for arrays. type : Defines the parameter type ( int , double , bool , string ). description : (Optional) Describes the parameter. constraints_description : (Optional) Additional constraints or information. min : (Optional) Minimum value for int and double types. max : (Optional) Maximum value for int and double types.","title":"Configuration"},{"location":"configuration/#configuration-guide","text":"","title":"Configuration Guide"},{"location":"configuration/#overview","text":"This document explains how to configure YAML files in the config directory for the parameter server. These files define parameters for the parameter server node, including their default values, types, descriptions, and constraints.","title":"Overview"},{"location":"configuration/#file-location","text":"Place YAML files in the config directory of your ROS 2 package. The node will parse all YAML files in this directory and its subfolders. If the package is built using colcon build --symlink-install , you can modify the files in the source directory without rebuilding the package.","title":"File Location"},{"location":"configuration/#yaml-file-structure","text":"Each YAML file can contain multiple parameter groups. Each parameter group contains multiple parameters with attributes: default : Default value of the parameter. type : Data type ( int , double , bool , string ). description : (Optional) Description of the parameter. constraints_description : (Optional) Additional constraints on the parameter. min : (Optional) Minimum value for int and double types. max : (Optional) Maximum value for int and double types.","title":"YAML File Structure"},{"location":"configuration/#example-parametersyaml","text":"Parameter_group_1: Parameter1: default: 5 min: 0 max: 10 type: int description: \"An integer parameter\" constraints_description: \"Must be between 0 and 10\" Parameter2: default: 3.14 min: 0.0 max: 10.0 type: double Parameter3: default: true type: bool Parameter4: default: \"hello\" type: string Parameter_group_2: ArrayParameter1: default: [1, 2, 3] type: int ArrayParameter2: default: [1.1, 2.2, 3.3] type: double ArrayParameter3: default: [true, false, true] type: bool ArrayParameter4: default: [\"foo\", \"bar\", \"baz\"] type: string","title":"Example parameters.yaml"},{"location":"configuration/#attributes","text":"default : Specifies the default value. Use a sequence ( [] ) for arrays. type : Defines the parameter type ( int , double , bool , string ). description : (Optional) Describes the parameter. constraints_description : (Optional) Additional constraints or information. min : (Optional) Minimum value for int and double types. max : (Optional) Maximum value for int and double types.","title":"Attributes"},{"location":"parameter_library/","text":"Parameters Library Documentation Examples Compiling examples using the parameter library can be found in the examples directory of the repository. YamlParameterParser Usage The YamlParameterParser class is used to parse YAML files containing parameter definitions. It reads the parameters from the specified YAML files and stores them for use in the ROS 2 parameter server as a vector of tuples containing the parameter name, value, and descriptor. Example Usage #include \"auto_ros_parameters/yaml_parameter_parser.hpp\" #include \"rcl_interfaces/msg/parameter_descriptor.hpp\" int main() { // Parse parameters from the temporary YAML file uav_ros2::YamlParameterParser parser(temp_path.string()); auto parameters = parser.getParameters(); // Iterate over the parameters for (const auto & param : parameters) { std::string name; // Use std::variant to store different types of parameter values uav_ros2::YamlParameterParser::ParameterValue value; rcl_interfaces::msg::ParameterDescriptor descriptor; std::tie(name, value, descriptor) = param; // Display the parameter name std::cout << \"Parameter name: \" << name << std::endl; } return 0; } uav_ros2::Parameter The uav_ros2::Parameter class is used to manage ROS 2 parameters. It automatically subscribes to parameter changes and provides a callback method to handle parameter changes. The class also provides a method to log parameter changes. It is intended to be used with the rclcpp::Node class. Modifying the Callback The uav_ros2::Parameter class provides a default callback method that logs parameter changes. You can modify this callback method by subclassing the uav_ros2::Parameter class and overriding the onParameterChanged method. #include \"auto_ros_parameters/parameters.hpp\" // Class that inherits from uav_ros2::Parameter class MyParameter : public uav_ros2::Parameter { public: MyParameter( rclcpp::Node::SharedPtr node, std::shared_ptr<rclcpp::ParameterEventHandler> parameter_handler, const std::string & name, const int & value, rcl_interfaces::msg::ParameterDescriptor descriptor) : uav_ros2::Parameter(node, parameter_handler, name, value, descriptor) { } protected: // Custom callback function in the derived class void onParameterChange(const rclcpp::Parameter & parameter) { if (parameter.as_int() == 42) { RCLCPP_INFO( node_->get_logger(), \"The answer to the Ultimate Question of Life, the Universe, and Everything!\"); } } }; Adding a New Parameter Here is a minimal example of how to add a new parameter using the uav_ros2::Parameter class or a subclass: #include <rclcpp/rclcpp.hpp> int main() { // Initialize the ROS 2 system rclcpp::init(0, nullptr); // Create a ROS 2 node named \"parameters_usage\" auto node = rclcpp::Node::make_shared(\"parameters_usage\"); // Create a parameter event handler auto parameter_handler = std::make_shared<rclcpp::ParameterEventHandler>(node); // Parameter value auto value = 42; // Parameter descriptor usage is the same as standard ROS 2 parameters auto param_descriptor = rcl_interfaces::msg::ParameterDescriptor(); param_descriptor.description = \"So Long, and Thanks for All the Fish!\"; // Create a parameter with a custom callback function auto config_file = MyParameter( node, parameter_handler, \"my_custom_parameter\", value, param_descriptor); // Spin the node rclcpp::spin(node); rclcpp::shutdown(); return 0; } Advanced Usage An example of a more advanced usage of the uav_ros2::Parameter class can be found in the parameter_server.cpp file.","title":"Parameter Library"},{"location":"parameter_library/#parameters-library-documentation","text":"","title":"Parameters Library Documentation"},{"location":"parameter_library/#examples","text":"Compiling examples using the parameter library can be found in the examples directory of the repository.","title":"Examples"},{"location":"parameter_library/#yamlparameterparser","text":"","title":"YamlParameterParser"},{"location":"parameter_library/#usage","text":"The YamlParameterParser class is used to parse YAML files containing parameter definitions. It reads the parameters from the specified YAML files and stores them for use in the ROS 2 parameter server as a vector of tuples containing the parameter name, value, and descriptor.","title":"Usage"},{"location":"parameter_library/#example-usage","text":"#include \"auto_ros_parameters/yaml_parameter_parser.hpp\" #include \"rcl_interfaces/msg/parameter_descriptor.hpp\" int main() { // Parse parameters from the temporary YAML file uav_ros2::YamlParameterParser parser(temp_path.string()); auto parameters = parser.getParameters(); // Iterate over the parameters for (const auto & param : parameters) { std::string name; // Use std::variant to store different types of parameter values uav_ros2::YamlParameterParser::ParameterValue value; rcl_interfaces::msg::ParameterDescriptor descriptor; std::tie(name, value, descriptor) = param; // Display the parameter name std::cout << \"Parameter name: \" << name << std::endl; } return 0; }","title":"Example Usage"},{"location":"parameter_library/#uav_ros2parameter","text":"The uav_ros2::Parameter class is used to manage ROS 2 parameters. It automatically subscribes to parameter changes and provides a callback method to handle parameter changes. The class also provides a method to log parameter changes. It is intended to be used with the rclcpp::Node class.","title":"uav_ros2::Parameter"},{"location":"parameter_library/#modifying-the-callback","text":"The uav_ros2::Parameter class provides a default callback method that logs parameter changes. You can modify this callback method by subclassing the uav_ros2::Parameter class and overriding the onParameterChanged method. #include \"auto_ros_parameters/parameters.hpp\" // Class that inherits from uav_ros2::Parameter class MyParameter : public uav_ros2::Parameter { public: MyParameter( rclcpp::Node::SharedPtr node, std::shared_ptr<rclcpp::ParameterEventHandler> parameter_handler, const std::string & name, const int & value, rcl_interfaces::msg::ParameterDescriptor descriptor) : uav_ros2::Parameter(node, parameter_handler, name, value, descriptor) { } protected: // Custom callback function in the derived class void onParameterChange(const rclcpp::Parameter & parameter) { if (parameter.as_int() == 42) { RCLCPP_INFO( node_->get_logger(), \"The answer to the Ultimate Question of Life, the Universe, and Everything!\"); } } };","title":"Modifying the Callback"},{"location":"parameter_library/#adding-a-new-parameter","text":"Here is a minimal example of how to add a new parameter using the uav_ros2::Parameter class or a subclass: #include <rclcpp/rclcpp.hpp> int main() { // Initialize the ROS 2 system rclcpp::init(0, nullptr); // Create a ROS 2 node named \"parameters_usage\" auto node = rclcpp::Node::make_shared(\"parameters_usage\"); // Create a parameter event handler auto parameter_handler = std::make_shared<rclcpp::ParameterEventHandler>(node); // Parameter value auto value = 42; // Parameter descriptor usage is the same as standard ROS 2 parameters auto param_descriptor = rcl_interfaces::msg::ParameterDescriptor(); param_descriptor.description = \"So Long, and Thanks for All the Fish!\"; // Create a parameter with a custom callback function auto config_file = MyParameter( node, parameter_handler, \"my_custom_parameter\", value, param_descriptor); // Spin the node rclcpp::spin(node); rclcpp::shutdown(); return 0; }","title":"Adding a New Parameter"},{"location":"parameter_library/#advanced-usage","text":"An example of a more advanced usage of the uav_ros2::Parameter class can be found in the parameter_server.cpp file.","title":"Advanced Usage"}]}