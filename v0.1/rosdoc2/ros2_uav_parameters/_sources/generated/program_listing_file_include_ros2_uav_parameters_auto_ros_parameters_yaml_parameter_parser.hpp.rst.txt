
.. _program_listing_file_include_ros2_uav_parameters_auto_ros_parameters_yaml_parameter_parser.hpp:

Program Listing for File yaml_parameter_parser.hpp
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_parameters_auto_ros_parameters_yaml_parameter_parser.hpp>` (``include/ros2_uav_parameters/auto_ros_parameters/yaml_parameter_parser.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 Damien SIX (damien@robotsix.net)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <yaml-cpp/yaml.h>
   #include <vector>
   #include <tuple>
   #include <string>
   #include <variant>
   #include <rcl_interfaces/msg/parameter_descriptor.hpp>
   
   // TODO(Damien SIX): Min and max keys are not handled for sequences.
   // Add support for this if possible.
   
   namespace uav_ros2
   {
   class YamlParameterParser
   {
   public:
     using ParameterValue = std::variant<int, double, std::string, bool, std::vector<int>,
         std::vector<double>, std::vector<std::string>, std::vector<bool>>;
   
     explicit YamlParameterParser(const std::string & file_path);
   
     const std::vector<std::tuple<std::string, ParameterValue,
       rcl_interfaces::msg::ParameterDescriptor>> & getParameters() const;
   
   private:
     void parseYamlFile(const std::string & file_path);
   
     std::vector<std::tuple<std::string, ParameterValue,
       rcl_interfaces::msg::ParameterDescriptor>> parameters_;  
   };
   
   }  // namespace uav_ros2
