
.. _program_listing_file_include_ros2_uav_parameters_auto_ros_parameters_parameters.hpp:

Program Listing for File parameters.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_parameters_auto_ros_parameters_parameters.hpp>` (``include/ros2_uav_parameters/auto_ros_parameters/parameters.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 Damien SIX (damien@robotsix.net)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <vector>
   #include <string>
   #include <memory>
   #include <rclcpp/rclcpp.hpp>
   
   namespace uav_ros2
   {
   using rcl_interfaces::msg::ParameterDescriptor;
   
   class Parameter
   {
   public:
     template<typename T>
     Parameter(
       rclcpp::Node::SharedPtr node,
       std::shared_ptr<rclcpp::ParameterEventHandler> param_suscriber,
       const std::string & name, const T & value, const ParameterDescriptor & descriptor)
     :     param_name_(name), node_(node)
     {
       node_->declare_parameter(name, value, descriptor);
       cb_handle_ = param_suscriber->add_parameter_callback(
         param_name_, [this](const rclcpp::Parameter & parameter)
         {return this->parameterCallback(parameter);});
     }
   
   protected:
     virtual void onParameterChange([[maybe_unused]] const rclcpp::Parameter & parameter);
   
   private:
     void parameterCallback(const rclcpp::Parameter & parameter);
   
     void logChange(const rclcpp::Parameter & parameter);
   
     std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle_;
     std::string param_name_;  
   
   protected:
     rclcpp::Node::SharedPtr node_;  
   };
   
   }  // namespace uav_ros2
