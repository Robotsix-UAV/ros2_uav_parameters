name: Tests and Deploy Documentation

permissions:
  contents: write

on:
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: ["Versioning"]
    types:
      - completed

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:jammy
    steps:
      - name: Setup ROS
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
          use-ros2-testing: true

      - name: Build and Test
        uses: ros-tooling/action-ros-ci@v0.3
        with:
          package-name: ${{ github.repository_name }}
          target-ros2-distro: humble
          colcon-defaults: |
            {
            "build": {
              "cmake-args": [
                  "-DCMAKE_CXX_FLAGS='-fprofile-arcs -ftest-coverage -fno-elide-constructors -fno-default-inline -ffunction-sections'","-DCMAKE_EXE_LINKER_FLAGS='-Wl,--gc-sections'"
                ]
              }
            }
          coverage-ignore-pattern: "*/test/*"

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report-${{ github.run_id }}
          path: ${{ github.workspace }}/ros_ws/lcov

  cleanup:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Delete deployment
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true

  deploy-mkdocs:
    needs: [cleanup, test]
    name: Deploy Mkdocs Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Get documentation directory for deployment
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "DEPLOY_REF=PR-${{ github.event.number }}" >> $GITHUB_ENV
          else
            cd /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}
            git fetch --tags
            TAG=$(git describe --tags --abbrev=0)
            VERSION=${TAG%.*}
            echo "DEPLOY_REF=${VERSION}" >> $GITHUB_ENV
          fi

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python3 -m pip install mike

      - name: Generate example documentation
        run: |
          git clone https://github.com/Robotsix-UAV/example_cpp_to_md
          python3 example_cpp_to_md/example_cpp_to_md.py ${{ github.workspace }}/examples ${{ github.workspace }}/docs

      - name: Create and push with mike
        run: |
          git config --local user.name robosix_bot
          git config --local user.email robotsix_bot@noreply.com
          git fetch origin gh-pages --depth=1
          cd ${{ github.workspace }}
          mike deploy ${{ env.DEPLOY_REF }} -b gh-pages -p

  deploy-rosdoc2-coverage:
    needs: deploy-mkdocs
    name: Deploy Rosdoc2 Documentation
    runs-on: ubuntu-latest
    container:
      image: robotsix/ros2_builder:main
      options: --user root
    defaults:
      run:
        working-directory: /home/ros
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Get documentation directory for deployment
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "DEPLOY_REF=PR-${{ github.event.number }}" >> $GITHUB_ENV
          else
            cd /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
            git config --global --add safe.directory /__w/ros2_uav_parameters/ros2_uav_parameters
            git fetch --tags
            TAG=$(git describe --tags --abbrev=0)
            VERSION=${TAG%.*}
            echo "DEPLOY_REF=${VERSION}" >> $GITHUB_ENV
          fi

      - name: Build rosdoc2 Documentation
        shell: bash
        run: |
          source /home/ros/.profile
          rosdoc2 build -p /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
      
      - name: Clone and checkout gh-pages branch
        run: |
          git clone https://github.com/${{ github.repository }}
          cd ${{ github.event.repository.name }}
          git fetch origin gh-pages --depth=1
          git checkout gh-pages

      - name: Download code coverage results
        uses: actions/download-artifact@master
        with:
          name: code-coverage-report-${{ github.run_id }}
          path: /home/ros/${{ github.event.repository.name }}/${{ env.DEPLOY_REF }}/lcov

      - name: Generate badge
        run: |
          git clone https://github.com/RaZeR-RBI/lcov-badger.git
          python3 lcov-badger/lcov-badger.py /home/ros/${{ github.event.repository.name }}/${{ env.DEPLOY_REF }}/lcov/total_coverage.info /home/ros/${{ github.event.repository.name }}/${{ env.DEPLOY_REF }}/lcov/badge.svg

      - name: Copy generated documentation
        run: |
          cd ${{ github.event.repository.name }}
          mkdir -p ${{ env.DEPLOY_REF }}/rosdoc2
          cp -r /home/ros/docs_output/${{ github.event.repository.name }} ${{ env.DEPLOY_REF }}/rosdoc2

      - name: Push changes to gh-pages squashing commits
        run: |
          cd ${{ github.event.repository.name }}
          git config --local user.name robosix
          git config --local user.email robotsix@noreply.com
          git add .
          git commit -m "Update rosdoc2 documentation and code coverage results"
          git reset $(git commit-tree HEAD^{tree} -m "gh-pages")
          git remote set-url --push origin https://$damien-robotsix:${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push -f origin gh-pages
